package nautictracker;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import nautictracker.TrackPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TRACK_POINT.
*/
public class TrackPointDao extends AbstractDao<TrackPoint, Long> {

    public static final String TABLENAME = "TRACK_POINT";

    /**
     * Properties of entity TrackPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Trip_id = new Property(0, Long.class, "trip_id", true, "TRIP_ID");
        public final static Property Latitude = new Property(1, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(2, String.class, "longitude", false, "LONGITUDE");
        public final static Property Timestamp = new Property(3, java.util.Date.class, "timestamp", false, "TIMESTAMP");
        public final static Property Sequence = new Property(4, Long.class, "sequence", false, "SEQUENCE");
    };


    public TrackPointDao(DaoConfig config) {
        super(config);
    }
    
    public TrackPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TRACK_POINT' (" + //
                "'TRIP_ID' INTEGER PRIMARY KEY ," + // 0: trip_id
                "'LATITUDE' TEXT," + // 1: latitude
                "'LONGITUDE' TEXT," + // 2: longitude
                "'TIMESTAMP' INTEGER," + // 3: timestamp
                "'SEQUENCE' INTEGER);"); // 4: sequence
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRACK_POINT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrackPoint entity) {
        stmt.clearBindings();
 
        Long trip_id = entity.getTrip_id();
        if (trip_id != null) {
            stmt.bindLong(1, trip_id);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(2, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(3, longitude);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(4, timestamp.getTime());
        }
 
        Long sequence = entity.getSequence();
        if (sequence != null) {
            stmt.bindLong(5, sequence);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TrackPoint readEntity(Cursor cursor, int offset) {
        TrackPoint entity = new TrackPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // trip_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // latitude
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // longitude
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // timestamp
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // sequence
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TrackPoint entity, int offset) {
        entity.setTrip_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLatitude(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLongitude(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimestamp(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setSequence(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TrackPoint entity, long rowId) {
        entity.setTrip_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TrackPoint entity) {
        if(entity != null) {
            return entity.getTrip_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
